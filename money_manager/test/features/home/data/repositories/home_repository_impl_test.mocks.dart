// Mocks generated by Mockito 5.3.2 from annotations
// in money_manager/test/features/home/data/repositories/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:money_manager/features/transaction/data/datasources/interface/transaction_remote_datasource.dart'
    as _i2;
import 'package:money_manager/features/transaction/data/models/transaction_add_model.dart'
    as _i5;
import 'package:money_manager/features/transaction/data/models/transaction_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TransactionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRemoteDataSource extends _i1.Mock
    implements _i2.TransactionRemoteDataSource {
  MockTransactionRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TransactionModel>> getMonthTransactionList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthTransactionList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
      ) as _i3.Future<List<_i4.TransactionModel>>);
  @override
  _i3.Future<List<_i4.TransactionModel>> getYearTransactionList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getYearTransactionList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
      ) as _i3.Future<List<_i4.TransactionModel>>);
  @override
  _i3.Future<Map<String, dynamic>> addTransaction(
          _i5.TransactionAddModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> updateTransaction(
          _i4.TransactionModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> deleteTransaction(
          _i4.TransactionModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [TransactionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class mockTransactionRemoteDataSourceForTest extends _i1.Mock
    implements _i2.TransactionRemoteDataSource {
  @override
  _i3.Future<List<_i4.TransactionModel>> getMonthTransactionList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthTransactionList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
        returnValueForMissingStub: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
      ) as _i3.Future<List<_i4.TransactionModel>>);
  @override
  _i3.Future<List<_i4.TransactionModel>> getYearTransactionList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getYearTransactionList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
        returnValueForMissingStub: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
      ) as _i3.Future<List<_i4.TransactionModel>>);
  @override
  _i3.Future<Map<String, dynamic>> addTransaction(
          _i5.TransactionAddModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> updateTransaction(
          _i4.TransactionModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> deleteTransaction(
          _i4.TransactionModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [params],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}
